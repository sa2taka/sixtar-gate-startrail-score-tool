// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  scores        Score[]
  settings      UserSettings?
  filters       SavedFilter[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum MusicType {
  solar
  lunar
}

enum Level {
  comet
  nova
  supernova
  quaser
  starlight
  mystic
}

enum Hazard {
  DEFAULT
  LV1
  LV
  LV3
  DEADEND
  SUDDEN
}

enum Pattern {
  DEFAULT
  MIRROR
  RANDOM
}

model Music {
  id           String            @id
  name         String
  englishName  String?
  bpm          Int?
  musicLength  Int
  link         String
  difficulties MusicDifficulty[]
  scores       Score[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model MusicDifficulty {
  id      String    @id @default(cuid())
  musicId String
  type    MusicType
  level   Level
  notes   Int
  combo   Int
  music   Music     @relation(fields: [musicId], references: [id], onDelete: Cascade)
  scores  Score[]

  @@unique([musicId, type, level])
}

model Score {
  id           String          @id @default(uuid())
  userId       String
  musicId      String
  difficultyId String
  mode         String
  score        Int
  blueStar     Int
  whiteStar    Int
  yellowStar   Int
  redStar      Int
  isFullCombo  Boolean
  hazard       Hazard
  pattern      Pattern
  playedAt     DateTime
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  music        Music           @relation(fields: [musicId], references: [id])
  difficulty   MusicDifficulty @relation(fields: [difficultyId], references: [id])
}

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  scoreExtractorUrl   String?
  pollingInterval     Int      @default(5000)
  notificationEnabled Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedFilter {
  id           String   @id @default(cuid())
  userId       String
  name         String
  filterConfig Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
