// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Result        Result[]
}

enum Kind {
  result
  select
}

enum MusicType {
  solar
  lunar
}

enum Difficulty {
  comet
  nova
  supernova
  quasar
  starlight
  mystic
}

enum Hazard {
  DEFAULT
  LV1
  LV2
  LV3
  DEADEND
  SUDDEN
}

enum Pattern {
  DEFAULT
  MIRROR
  RANDOM
}

model Music {
  id          String   @id
  name        String
  englishName String?
  bpm         Int?
  musicLength Int
  link        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Chart       Chart[]
}

model Chart {
  musicId    String
  type       MusicType
  difficulty Difficulty
  level      Int
  notes      Int
  combo      Int
  music      Music      @relation(fields: [musicId], references: [id], onDelete: Cascade)
  userId     String?
  Result     Result[]

  @@id([musicId, type, difficulty])
}

model Result {
  id          String     @id @default(uuid())
  userId      String
  musicId     String
  kind        String
  type        MusicType
  difficulty  Difficulty
  mode        String
  score       Int
  blueStar    Int?
  whiteStar   Int?
  yellowStar  Int?
  redStar     Int?
  isFullCombo Boolean
  hazard      Hazard?
  pattern     Pattern?
  playedAt    DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chart       Chart      @relation(fields: [musicId, type, difficulty], references: [musicId, type, difficulty])
}
